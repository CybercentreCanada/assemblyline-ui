"""Lookup through Malware Bazaar.

"""
import json
import os

import requests

from flask import Flask, Response, jsonify, make_response, request


app = Flask(__name__)


VERIFY = os.environ.get("MB_VERIFY", False)
MAX_LIMIT = os.environ.get("MB_MAX_LIMIT", 1000)  # Maximum number to return
CLASSIFICATION = os.environ.get("CLASSIFICATION", "TLP:CLEAR")  # Classification of this service

# Mapping of AL tag names to external systems "tag" names
TAG_MAPPING = os.environ.get("TAG_MAPPING", {
    "file.pe.imports.imphash": "imphash",
    "md5": "md5",
    "sha1": "sha1",
    "sha256": "sha256",
})
if not isinstance(TAG_MAPPING, dict):
    TAG_MAPPING = json.loads(TAG_MAPPING)


def make_api_response(data, err: str = "", status_code: int = 200) -> Response:
    """Create a standard response for this API."""
    return make_response(
        jsonify({
            "api_response": data,
            "api_error_message": err,
            "api_status_code": status_code,
        }),
        status_code,
    )


@app.route("/tags/", methods=["GET"])
def get_tag_names() -> Response:
    """Return supported tag names."""
    return make_api_response({tname: CLASSIFICATION for tname in sorted(TAG_MAPPING)})


@app.route("/search/<tag_name>/<path:tag>/", methods=["GET"])
def search_tag(tag_name: str, tag: str):
    """Lookup tags from Malware Bazaar.

    Tag values submitted must be URL encoded.

    Arguments: (optional)
    classification  => Classification of the tag [Default: $CLASSIFICATION]
    max_timeout     => Maximum execution time for the call in seconds [Default: 3 seconds]
    limit           => limit the amount of returned results per source [Default: 1000]


    This method should return an api_response containing:

        {
            "link": <url to search results in external system>,
            "count": <count of results from the external system>,
            "classification": <CLASSIFICATION>,
        }
    """
    tn = TAG_MAPPING.get(tag_name)
    if tn is None:
        return make_api_response(
            None,
            f"Invalid tag name: {tag_name}. [valid tags: {', '.join(TAG_MAPPING.keys())}]",
            400,
        )

    search_key = tn
    if tn in ("md5", "sha1", "sha256"):
        search_key = "hash"
    if search_key == "hash" and len(tag) not in (32, 40, 64):
        return make_api_response(None, "Invalid hash provided. Require md5, sha1 or sha256", 400)

    limit = int(request.args.get("limit", "1000"))
    if limit > int(MAX_LIMIT):
        limit = int(MAX_LIMIT)

    max_timeout = request.args.get("max_timeout", "3")
    # noinspection PyBroadException
    try:
        max_timeout = float(max_timeout)
    except Exception:
        max_timeout = 3.0

    session = requests.Session()
    url = "https://mb-api.abuse.ch/api/v1/"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
    }
    query = {
        "hash": "get_info",
        "imphash": "get_imphash",
    }[search_key]
    data = {
        "query": query,
        search_key: tag,
        "limit": limit,
    }

    rsp = session.post(url, data, headers=headers, verify=VERIFY, timeout=max_timeout)
    # MB should always return a 200, even on error.
    if rsp.status_code != 200:
        return make_api_response(rsp.text, "Unknown error submitting data to upstream.", rsp.status_code)

    rsp_json = rsp.json()
    query_status = rsp_json.get("query_status")
    if query_status in ("no_result", "hash_not_found"):
        return make_api_response(None, "No results.", 404)
    elif query_status != "ok":
        # any other error, just return a generic error code
        return make_api_response(None, query_status, 400)

    # return view links to the gui once we know it's found
    data = rsp_json.get("data", [])

    return make_api_response({
        "link": f"https://bazaar.abuse.ch/browse.php?search={tn}%3A{tag}",
        "count": len(data),
        "classification": CLASSIFICATION,
    })


def main():
    app.run(host="0.0.0.0", port=8000, debug=False)


if __name__ == "__main__":
    main()
