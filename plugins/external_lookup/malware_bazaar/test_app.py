import pytest
import requests

from .app import app, CLASSIFICATION, TAG_MAPPING


@pytest.fixture()
def test_client():
    """generate a test client."""
    with app.test_client() as client:
        with app.app_context():
            app.config["TESTING"] = True
            yield client


def test_get_mappings(test_client, mocker):
    """Ensure tags are returned."""
    rsp = test_client.get("/tags/")
    assert rsp.status_code == 200
    data = rsp.json["api_response"]
    assert data == {tname: CLASSIFICATION for tname in sorted(TAG_MAPPING)}


def test_hash_found(test_client, mocker):
    """Validate respone for a hash that exists."""
    digest = "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754"
    mock_response = mocker.MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "query_status": "ok",
        "data": [{
            "sha256_hash": digest,
        }],
    }

    # setup mock response for a valid hash lookup
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/search/sha256/{digest}/")
    expected = {
        "api_error_message": "",
        "api_response": {
            "classification": "TLP:CLEAR",
            "link": f"https://bazaar.abuse.ch/browse.php?search=sha256%3A{digest}",
            "count": 1,
        },
        "api_status_code": 200,
    }

    assert rsp.status_code == 200
    assert rsp.json == expected


def test_hash_dne(test_client, mocker):
    """Validate respone for a hash that does not exists."""
    digest = "a" * 32
    mock_response = mocker.MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "query_status": "hash_not_found",
    }

    # setup mock response for a valid hash lookup
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/search/md5/{digest}/")
    expected = {
        "api_error_message": "No results.",
        "api_response": None,
        "api_status_code": 404,
    }
    assert rsp.status_code == 404
    assert rsp.json == expected


def test_error_conditions(test_client, mocker):
    """Validate error handling."""

    # unknown error
    mock_response = mocker.MagicMock()
    mock_response.status_code = 400
    mock_response.text = "Some bad response"
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/search/md5/{'a' * 32}/")
    expected = {
        "api_error_message": "Unknown error submitting data to upstream.",
        "api_response": "Some bad response",
        "api_status_code": 400,
    }
    assert rsp.status_code == 400
    assert rsp.json == expected

    # invalid hash
    rsp = test_client.get("/search/md5/abc}/")
    expected = {
        "api_error_message": "Invalid hash provided. Require md5, sha1 or sha256",
        "api_response": None,
        "api_status_code": 400,
    }
    assert rsp.status_code == 400
    assert rsp.json == expected

    # invalid indicator name
    rsp = test_client.get("/search/abc/abc}/")
    assert rsp.status_code == 400
    assert rsp.json["api_error_message"].startswith("Invalid tag name: ")

    # Non-handled query_status
    mock_response = mocker.MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "query_status": "no_hash_provided",
    }
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/search/md5/{'a' * 32}/")
    expected = {
        "api_error_message": "no_hash_provided",
        "api_response": None,
        "api_status_code": 400,
    }
    assert rsp.status_code == 400
    assert rsp.json == expected


def test_imphash_found(test_client, mocker):
    """Validate respone for an imphash that exists."""
    imphash = "45d579faec0eaf279c0841b2233727cf"
    digest1 = "a" * 64
    digest2 = "b" * 64

    mock_response = mocker.MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "query_status": "ok",
        "data": [
            {"sha256_hash": digest1},
            {"sha256_hash": digest2},
        ],
    }
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/search/file.pe.imports.imphash/{imphash}/")
    expected = {
        "api_error_message": "",
        "api_response": {
            "classification": "TLP:CLEAR",
            "count": 2,
            "link": f"https://bazaar.abuse.ch/browse.php?search=imphash%3A{imphash}",
        },
        "api_status_code": 200,
    }

    assert rsp.status_code == 200
    assert rsp.json == expected
