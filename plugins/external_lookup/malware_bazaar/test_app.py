import pytest
import requests

from .app import app, CLASSIFICATION, TAG_MAPPING


@pytest.fixture()
def test_client():
    """generate a test client."""
    with app.test_client() as client:
        with app.app_context():
            app.config["TESTING"] = True
            yield client


@pytest.fixture()
def mock_lookup_exists(mocker):
    """Mock response for a hash that exists."""
    def _mock_lookup_exists(
        *,
        sha256_hash="7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754",
        sha1_hash="77543bde72105ae1a28cc71815d9ea89ea162052",
        md5_hash="c40aead7a31d14e05b2ee4a11849eced",
        imphash="f34d5f2d4577ed6d9ceec516c1f5a744",
        tlsh="T1AA15491232F50F49F8BE97F9562810918777BA9E513ED24C7D8D30DE4BA2B010A67B27",
        comment="Malspam distributing AZORult",
        reporter="abuse_ch",
        signature="AZORult",
        intelligence={
            "clamav": [
                "SecuriteInfo.com.Trojan.InjectNET.14.27839.30.UNOFFICIAL",
            ],
        },
        vendor_intel={
            "CERT-PL_MWDB": {
                "detection": "azorult",
                "link": "https://mwdb.cert.pl/sample/7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754/"
            },
            "YOROI_YOMI": {
                "detection": "Malicious File",
                "score": "1.00"
            },
            "ReversingLabs": {
                "threat_name": "ByteCode-MSIL.Trojan.AgentTesla",
                "status": "MALICIOUS",
                "first_seen": "2020-10-19 05:14:13",
                "scanner_count": "28",
                "scanner_match": "23",
                "scanner_percent": "82.14"
            },
            "Spamhaus_HBL": [
                {
                    "detection": "malicious",
                    "link": "https://www.spamhaus.org/hbl/",
                }
            ],
        },
        additional_results=None,
    ):
        result_args = [
            "sha256_hash", "sha1_hash", "md5_hash", "imphash", "tlsh",
            "comment", "reporter", "signature", "intelligence", "vendor_intel",
        ]
        # create the default result
        kwargs = {k: v for k, v in locals().items() if k in result_args and v is not None}

        # append additional results
        data = [kwargs]
        if additional_results is None:
            additional_results = []
        elif isinstance(additional_results, dict):
            additional_results = [additional_results]
        data.extend(additional_results)

        mock_response = mocker.MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "query_status": "ok",
            "data": data,
        }
        # setup mock response for a valid hash lookup
        mock_session = mocker.patch.object(requests, "Session", autospec=True)
        mock_session.return_value.post.return_value = mock_response
        return data

    return _mock_lookup_exists


def test_get_mappings(test_client, mocker):
    """Ensure tags are returned."""
    rsp = test_client.get("/tags/")
    assert rsp.status_code == 200
    data = rsp.json["api_response"]
    assert data == {tname: CLASSIFICATION for tname in sorted(TAG_MAPPING)}


def test_hash_found(test_client, mock_lookup_exists):
    """Validate respone for a hash that exists."""
    digest = "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754"
    mock_lookup_exists(sha256_hash=digest)

    rsp = test_client.get(f"/search/sha256/{digest}/")
    expected = {
        "api_error_message": "",
        "api_response": {
            "classification": "TLP:CLEAR",
            "link": f"https://bazaar.abuse.ch/browse.php?search=sha256%3A{digest}",
            "count": 1,
        },
        "api_status_code": 200,
    }

    assert rsp.status_code == 200
    assert rsp.json == expected


def test_hash_dne(test_client, mocker):
    """Validate respone for a hash that does not exists."""
    digest = "a" * 32
    mock_response = mocker.MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "query_status": "hash_not_found",
    }

    # setup mock response for a valid hash lookup
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/search/md5/{digest}/")
    expected = {
        "api_error_message": "No results.",
        "api_response": None,
        "api_status_code": 404,
    }
    assert rsp.status_code == 404
    assert rsp.json == expected


def test_error_conditions(test_client, mocker):
    """Validate error handling."""

    # unknown error
    mock_response = mocker.MagicMock()
    mock_response.status_code = 400
    mock_response.text = "Some bad response"
    mock_session = mocker.patch.object(requests, "Session", autospec=True)
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/search/md5/{'a' * 32}/")
    expected = {
        "api_error_message": "Unknown error submitting data to upstream.",
        "api_response": "Some bad response",
        "api_status_code": 400,
    }
    assert rsp.status_code == 400
    assert rsp.json == expected

    # invalid hash
    rsp = test_client.get("/search/md5/abc}/")
    expected = {
        "api_error_message": "Invalid hash provided. Require md5, sha1 or sha256",
        "api_response": None,
        "api_status_code": 422,
    }
    assert rsp.status_code == 422
    assert rsp.json == expected

    # invalid tag name
    rsp = test_client.get("/search/abc/abc}/")
    assert rsp.status_code == 422
    assert rsp.json["api_error_message"].startswith("Invalid tag name: ")

    # Non-handled query_status
    mock_response = mocker.MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "query_status": "no_hash_provided",
    }
    mock_session.return_value.post.return_value = mock_response

    rsp = test_client.get(f"/search/md5/{'a' * 32}/")
    expected = {
        "api_error_message": "no_hash_provided",
        "api_response": None,
        "api_status_code": 400,
    }
    assert rsp.status_code == 400
    assert rsp.json == expected


def test_imphash_found(test_client, mock_lookup_exists):
    """Validate respone for an imphash that exists."""
    imphash = "45d579faec0eaf279c0841b2233727cf"
    mock_lookup_exists(
        imphash=imphash,
        additional_results={"sha256_hash": "a" * 64}
    )

    rsp = test_client.get(f"/search/file.pe.imports.imphash/{imphash}/")
    expected = {
        "api_error_message": "",
        "api_response": {
            "classification": "TLP:CLEAR",
            "count": 2,
            "link": f"https://bazaar.abuse.ch/browse.php?search=imphash%3A{imphash}",
        },
        "api_status_code": 200,
    }

    assert rsp.status_code == 200
    assert rsp.json == expected


def test_hash_details(test_client, mock_lookup_exists):
    """Validate respone for a detailed hash lookup that exists."""
    digest = "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754"
    data = mock_lookup_exists(sha256_hash=digest)

    rsp = test_client.get(f"/details/sha256/{digest}/")
    expected = {
        "api_error_message": "",
        "api_response": [{
            "classification": "TLP:CLEAR",
            "description": "Malspam distributing AZORult",
            "confirmed": False,
            "data": data[0],
            "malicious": True,
        }],
        "api_status_code": 200,
    }

    assert rsp.status_code == 200
    assert rsp.json == expected


def test_tag_details(test_client, mock_lookup_exists):
    """Validate respone for a detailed general tag lookup that exists."""
    # only hash lookups will have vendor_intel returned
    # disable comment to test description logic
    data = mock_lookup_exists(vendor_intel=None, comment="")

    rsp = test_client.get(f"/details/tlsh/{data[0]['tlsh']}/")
    expected = {
        "api_error_message": "",
        "api_response": [{
            "classification": "TLP:CLEAR",
            "description": f"File submitted to Malware Bazaar by: {data[0]['reporter']}",
            "confirmed": False,
            "data": data[0],
            "malicious": True,
        }],
        "api_status_code": 200,
    }

    assert rsp.status_code == 200
    assert rsp.json == expected


def test_hash_details_variants(test_client, mock_lookup_exists):
    """Validate respone for a detailed hash tag lookup with various alterations in results retunred."""
    additional_results = [
        # no signature
        {
            "sha256_hash": "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754",
            "comment": "Malware",
            "signature": "",
            "intelligence": {
                "clamav": [
                    "SecuriteInfo.com.Trojan.InjectNET.14.27839.30.UNOFFICIAL",
                ],
            },
            "vendor_intel": {},
        },
        # no intel, but has signature
        {
            "sha256_hash": "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754",
            "comment": "Malware",
            "signature": "AZORult",
            "intelligence": {},
            "vendor_intel": {},
        },
        # no intel, or signature and vendor_intel has status
        {
            "sha256_hash": "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754",
            "comment": "Malware",
            "signature": "",
            "intelligence": {},
            "vendor_intel": {
                "ReversingLabs": {
                    "status": "MALICIOUS",
                },
            },
        },
        # no intel, or signature and vendor_intel has verdict in list
        {
            "sha256_hash": "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754",
            "comment": "Malware",
            "signature": "",
            "intelligence": {},
            "vendor_intel": {
                "TheLabs": [{
                    "verdict": "MALICIOUS",
                }],
            },
        },
        # not malicious
        {
            "sha256_hash": "7de2c1bf58bce09eecc70476747d88a26163c3d6bb1d85235c24a558d1f16754",
            "comment": "Not Malware",
            "signature": "",
            "intelligence": {},
            "vendor_intel": {},
        },
    ]
    data = mock_lookup_exists(additional_results=additional_results)

    rsp = test_client.get(f"/details/md5/{data[0]['md5_hash']}/")
    expected = {
        "api_error_message": "",
        "api_response": [
            {
                "classification": "TLP:CLEAR",
                "description": data[0]["comment"],
                "confirmed": False,
                "data": data[0],
                "malicious": True,
            },
            {
                "classification": "TLP:CLEAR",
                "description": "Malware",
                "confirmed": False,
                "data": data[1],
                "malicious": True,
            },
            {
                "classification": "TLP:CLEAR",
                "description": "Malware",
                "confirmed": False,
                "data": data[2],
                "malicious": True,
            },
            {
                "classification": "TLP:CLEAR",
                "description": "Malware",
                "confirmed": False,
                "data": data[3],
                "malicious": True,
            },
            {
                "classification": "TLP:CLEAR",
                "description": "Malware",
                "confirmed": False,
                "data": data[4],
                "malicious": True,
            },
            {
                "classification": "TLP:CLEAR",
                "description": "Not Malware",
                "confirmed": False,
                "data": data[5],
                "malicious": False,
            },
        ],
        "api_status_code": 200,
    }

    assert rsp.status_code == 200
    assert rsp.json == expected
